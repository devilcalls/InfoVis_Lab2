---
title: "Week 2 Lab - Tidyverse"
format: html
editor: visual
author: "Daniel Lip, Pierre Chan, Howard Yeo, Joel Koh, Jolie Yeo, Danish Dol"
---

# Task 1

```{r}
#| label: Data Tidying Task 1
library(tidyverse)
library(readxl)
library(waldo)

gdp <- read_xls("API_NY.GDP.PCAP.CD_DS2_en_excel_v2_85284.xls", skip=3)
gdp_2019 <- select(gdp, name = 'Country Name', code = 'Country Code', gdp_per_capita = '2019')
gdp_2019

life_exp <- read_xls("API_SP.DYN.LE00.IN_DS2_en_excel_v2_85119.xls", skip=3)
life_exp_2019 <- select(life_exp, name = 'Country Name', life_exp = '2019')

pop <- read_xls("API_SP.POP.TOTL_DS2_en_excel_v2_85347.xls", skip=3)
pop_2019 <- select(pop, name = 'Country Name', pop = '2019')

# combine the three dataframes together
combined_df <- inner_join(gdp_2019, life_exp_2019, join_by(name))
combined_df <- inner_join(combined_df, pop_2019, join_by(name))

# load countrycode
library("countrycode")
data(codelist)
cleaned_codelist <- select(codelist, continent, code=wb)
combined_df <- inner_join(combined_df, cleaned_codelist, join_by(code))

# sort alphabetically
arr_df <- arrange(combined_df, name)

# remove na rows
arr_df <- drop_na(arr_df, gdp_per_capita)
arr_df <- drop_na(arr_df, continent)

# rename gdp column
arr_df <- rename(arr_df, gdp_per_cap = gdp_per_capita)

# compare with reference
world_ref <- readr::read_csv("country_profiles_2019.csv")
waldo::compare(arr_df, world_ref, tolerance = 1e-12)
```

# Task 2

```{R}
#| label: Data Tidying Task 2
#task 2.1
year_row <- read_excel("outputFile.xlsx", sheet = "T4", range = "B11:BQ11", col_names = FALSE)
years <- as.numeric(as.character(unlist(year_row)))
raw_data <- read_excel("outputFile.xlsx", sheet = "T4", range = "A37:BQ86", col_names = FALSE)
colnames(raw_data) <- c("age_group", as.character(years))

#task 2.2
target_years <- seq(1960, 2020, by = 10)

raw_data <- raw_data %>% mutate(sex = rep(c("Male", "Female"), each = 25)) %>% mutate(across(-c(age_group, sex), as.numeric)) %>% select(age_group, sex, all_of(as.character(target_years)))

#task 2.3
long_data <- raw_data %>% pivot_longer(cols = -c(age_group, sex), names_to = "year", values_to = "pop") %>% mutate(year = as.numeric(year), age_group = case_when(str_detect(age_group, "Years & Over") ~ paste0(str_extract(age_group, "^\\d+"), " - ", as.numeric(str_extract(age_group, "^\\d+")) + 4), TRUE ~ age_group), age = as.numeric(str_extract(age_group, "^\\d+")))

#task 2.4
regular_groups <- long_data %>% filter(str_detect(age_group, " - "))

cumulative_groups <- long_data %>% filter(str_detect(age_group, "Years & Over")) %>% mutate(age_group = paste0(str_extract(age_group, "^\\d+"), " - ", as.numeric(str_extract(age_group, "^\\d+")) + 4))

#task 2.5
final_data <- bind_rows(regular_groups, cumulative_groups) %>% mutate(sex = factor(sex, levels = c("Male", "Female"))) %>% select(age, sex, year, pop, age_group) %>% filter(!is.na(pop), !is.na(age), !is.na(sex), !is.na(year)) %>% arrange(age, sex, year)

final_data_cleaned <- final_data %>% mutate(pop = if_else(age >= 70 & age <= 74, pmax(pop, max(pop[age >= 70 & age <= 74 & str_detect(age_group, "Years & Over")], na.rm = TRUE), na.rm = TRUE), pop)) %>% distinct(age, sex, year, .keep_all = TRUE) %>% select(-age_group) %>% arrange(age, sex, year)

print(final_data_cleaned)

# Compare with reference
sg_ref <- readr::read_csv("sg_5yr_cohorts.csv", col_types = cols(sex = col_factor(levels = c("Male", "Female"))))
waldo::compare(final_data_cleaned, sg_ref, tolerance = 1e-12)

```

# Reflection

1.  **Key takeaway:**
    -   I learned the importance of controlling column types explicitly when cleaning data in R. This stood out to me because I kept running into frustrating errors caused by automatic type inference in pivot_longer().
2.  **Challenges:**
    -   Task 2.3 was the real challenge as it took me a while to understand what is it asking for initially i thought if n - n years exist use these and drop the years & over, and if does not exist such as 90 - 94, we were to convert 90 years & over to it.
3.  **AI assistance:**
    -   Used AI tool for task 2.3 on understanding what the task wanted.
4.  **Teamwork:**
    -   My team worked together and shared suggestions to improve the working version of the code. One strength in our team is we openly share solutions. One area for improvement would be to utilize GitHub to track changes made which can improve our work efficiency.
5.  **Additional feedback**Â *(optional)*:
